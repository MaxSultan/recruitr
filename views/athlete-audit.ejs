<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= athlete.firstName %> <%= athlete.lastName %> - Rating Audit Trail</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .athlete-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .athlete-info h1 {
            color: #2d3748;
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

        .athlete-meta {
            display: flex;
            gap: 1rem;
            color: #666;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .back-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: background 0.3s ease;
        }

        .back-btn:hover {
            background: #5a67d8;
        }

        .current-ratings {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .rating-card {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
        }

        .rating-card h3 {
            color: #4a5568;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .rating-value {
            font-size: 2rem;
            font-weight: 700;
            color: #2d3748;
        }

        .rating-change {
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        .positive { color: #38a169; }
        .negative { color: #e53e3e; }
        .neutral { color: #718096; }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 2rem;
        }

        .chart-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .chart-section h2 {
            margin-bottom: 1.5rem;
            color: #2d3748;
        }

        .chart-container {
            position: relative;
            height: 400px;
            margin-bottom: 2rem;
        }

        .matches-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-height: 600px;
            overflow-y: auto;
        }

        .matches-section h2 {
            margin-bottom: 1.5rem;
            color: #2d3748;
        }

        .match-item {
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .match-item:hover {
            border-color: #667eea;
            box-shadow: 0 2px 4px rgba(102, 126, 234, 0.1);
        }

        .match-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .match-date {
            font-weight: 600;
            color: #4a5568;
        }

        .match-result {
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .result-win {
            background: #c6f6d5;
            color: #22543d;
        }

        .result-loss {
            background: #fed7d7;
            color: #742a2a;
        }

        .match-details {
            margin-bottom: 0.75rem;
        }

        .opponent {
            font-weight: 600;
            color: #2d3748;
        }

        .match-info {
            color: #666;
            font-size: 0.9rem;
        }

        .rating-changes {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            font-size: 0.85rem;
        }

        .rating-change-item {
            background: #f8fafc;
            padding: 0.75rem;
            border-radius: 6px;
            text-align: center;
        }

        .rating-change-label {
            color: #666;
            margin-bottom: 0.25rem;
        }

        .rating-change-value {
            font-weight: 600;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #666;
        }

        .error {
            background: #fed7d7;
            color: #742a2a;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #666;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #cbd5e0;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .athlete-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .athlete-info h1 {
                font-size: 2rem;
            }
            
            .current-ratings {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="athlete-header">
                <div class="athlete-info">
                    <h1><%= athlete.firstName %> <%= athlete.lastName %></h1>
                    <div class="athlete-meta">
                        <div class="meta-item">
                            <i class="fas fa-map-marker-alt"></i>
                            <span><%= athlete.state || 'N/A' %></span>
                        </div>
                        <div class="meta-item">
                            <i class="fas fa-calendar"></i>
                            <span>Rating Audit Trail</span>
                        </div>
                    </div>
                </div>
                <a href="/" class="back-btn">
                    <i class="fas fa-arrow-left"></i>
                    Back to Athletes
                </a>
            </div>
            
            <div class="current-ratings">
                <div class="rating-card">
                    <h3>Current ELO</h3>
                    <div class="rating-value" id="currentElo"><%= athlete.elo || 1500 %></div>
                    <div class="rating-change" id="eloChange">+0 from start</div>
                </div>
                <div class="rating-card">
                    <h3>Current Glicko</h3>
                    <div class="rating-value" id="currentGlicko"><%= athlete.glickoRating || 1500 %></div>
                    <div class="rating-change" id="glickoChange">+0 from start</div>
                </div>
                <div class="rating-card">
                    <h3>Glicko RD</h3>
                    <div class="rating-value" id="currentRd"><%= athlete.glickoRd || 200 %></div>
                    <div class="rating-change">Rating Deviation</div>
                </div>
                <div class="rating-card">
                    <h3>Total Matches</h3>
                    <div class="rating-value" id="totalMatches">0</div>
                    <div class="rating-change">Record: 0-0</div>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="chart-section">
                <h2><i class="fas fa-chart-line"></i> Rating Evolution</h2>
                <div class="chart-container">
                    <canvas id="ratingChart"></canvas>
                </div>
            </div>

            <div class="matches-section">
                <h2><i class="fas fa-list"></i> Match History</h2>
                <div id="matchesList">
                    <div class="loading">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Loading match history...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const athleteId = <%= athlete.id %>;
        let ratingChart;
        let matches = [];

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadMatchHistory();
        });

        async function loadMatchHistory() {
            try {
                const response = await fetch(`/api/athletes/${athleteId}/ranking-matches`);
                const data = await response.json();
                
                if (data.success) {
                    matches = data.data || [];
                    renderMatches();
                    updateCurrentRatings();
                    createRatingChart();
                } else {
                    showError('Failed to load match history: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error loading match history:', error);
                showError('Failed to load match history. Please try again.');
            }
        }

        function renderMatches() {
            const matchesList = document.getElementById('matchesList');
            
            if (matches.length === 0) {
                matchesList.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-chart-line"></i>
                        <h3>No Match History</h3>
                        <p>This athlete hasn't wrestled any matches yet.</p>
                    </div>
                `;
                return;
            }

            // Sort matches by date (newest first)
            matches.sort((a, b) => new Date(b.matchDate) - new Date(a.matchDate));

            matchesList.innerHTML = matches.map(match => {
                const matchDate = new Date(match.matchDate).toLocaleDateString();
                const resultClass = match.matchResult === 'win' ? 'result-win' : 'result-loss';
                const resultText = match.matchResult === 'win' ? 'Win' : 'Loss';
                
                const eloChange = match.elo.after - match.elo.before;
                const glickoChange = parseFloat(match.glicko.rating.after) - parseFloat(match.glicko.rating.before);
                
                const eloChangeClass = eloChange > 0 ? 'positive' : eloChange < 0 ? 'negative' : 'neutral';
                const glickoChangeClass = glickoChange > 0 ? 'positive' : glickoChange < 0 ? 'negative' : 'neutral';
                
                return `
                    <div class="match-item">
                        <div class="match-header">
                            <div class="match-date">${matchDate}</div>
                            <div class="match-result ${resultClass}">${resultText}</div>
                        </div>
                        
                        <div class="match-details">
                            <div class="opponent">vs. ${match.opponent.name}</div>
                            <div class="match-info">
                                ${match.season.weightClass || 'N/A'} • ${match.resultType || 'N/A'} • ${match.season.team || 'Unknown Event'}
                            </div>
                        </div>
                        
                        <div class="rating-changes">
                            <div class="rating-change-item">
                                <div class="rating-change-label">ELO Change</div>
                                <div class="rating-change-value ${eloChangeClass}">
                                    ${eloChange > 0 ? '+' : ''}${eloChange.toFixed(1)}
                                </div>
                                <div style="font-size: 0.75rem; color: #666;">
                                    ${match.elo.before.toFixed(1)} → ${match.elo.after.toFixed(1)}
                                </div>
                            </div>
                            <div class="rating-change-item">
                                <div class="rating-change-label">Glicko Change</div>
                                <div class="rating-change-value ${glickoChangeClass}">
                                    ${glickoChange > 0 ? '+' : ''}${glickoChange.toFixed(1)}
                                </div>
                                <div style="font-size: 0.75rem; color: #666;">
                                    ${parseFloat(match.glicko.rating.before).toFixed(1)} → ${parseFloat(match.glicko.rating.after).toFixed(1)}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function updateCurrentRatings() {
            if (matches.length === 0) return;

            // Calculate total wins/losses
            const wins = matches.filter(m => m.matchResult === 'win').length;
            const losses = matches.filter(m => m.matchResult === 'loss').length;
            
            document.getElementById('totalMatches').textContent = matches.length;
            document.querySelector('.rating-change').textContent = `Record: ${wins}-${losses}`;

            // Calculate rating changes from start
            const firstMatch = matches[matches.length - 1]; // Oldest match
            const lastMatch = matches[0]; // Newest match
            
            if (firstMatch && lastMatch) {
                const eloChange = lastMatch.elo.after - firstMatch.elo.before;
                const glickoChange = parseFloat(lastMatch.glicko.rating.after) - parseFloat(firstMatch.glicko.rating.before);
                
                document.getElementById('eloChange').textContent = 
                    `${eloChange > 0 ? '+' : ''}${eloChange.toFixed(1)} from start`;
                document.getElementById('glickoChange').textContent = 
                    `${glickoChange > 0 ? '+' : ''}${glickoChange.toFixed(1)} from start`;
            }
        }

        function createRatingChart() {
            if (matches.length === 0) return;

            const ctx = document.getElementById('ratingChart').getContext('2d');
            
            // Sort matches by date for chart
            const sortedMatches = [...matches].sort((a, b) => new Date(a.matchDate) - new Date(b.matchDate));
            
            const labels = sortedMatches.map(match => {
                const date = new Date(match.matchDate);
                return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            });
            
            const eloData = sortedMatches.map(match => match.elo.after);
            const glickoData = sortedMatches.map(match => parseFloat(match.glicko.rating.after));
            
            // Add starting points
            if (sortedMatches.length > 0) {
                const firstMatch = sortedMatches[0];
                labels.unshift('Start');
                eloData.unshift(firstMatch.elo.before);
                glickoData.unshift(parseFloat(firstMatch.glicko.rating.before));
            }

            if (ratingChart) {
                ratingChart.destroy();
            }

            ratingChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'ELO Rating',
                        data: eloData,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        tension: 0.4,
                        fill: false
                    }, {
                        label: 'Glicko Rating',
                        data: glickoData,
                        borderColor: '#38a169',
                        backgroundColor: 'rgba(56, 161, 105, 0.1)',
                        tension: 0.4,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Match Date'
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Rating'
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });
        }

        function showError(message) {
            const matchesList = document.getElementById('matchesList');
            matchesList.innerHTML = `
                <div class="error">
                    <i class="fas fa-exclamation-triangle"></i>
                    ${message}
                </div>
            `;
        }
    </script>
</body>
</html>
